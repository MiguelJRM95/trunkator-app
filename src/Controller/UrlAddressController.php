<?php

namespace App\Controller;

use App\Entity\UrlAddress;
use App\Repository\UrlAddressRepository;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\Routing\Annotation\Route;

class UrlAddressController extends AbstractController
{
    #[Route('/urlAddress', name: 'url_address')]
    public function createUrlAddress(ManagerRegistry $doctrine, String $urlEndpoint, String $realUrl, bool $autogenerated): Response
    {   
        $created = '';

        $entityManager = $doctrine->getManager();

        $newUrl = new UrlAddress();
        $newUrl->setUrlEndpoint($urlEndpoint);
        $newUrl->setRealUrl($realUrl);
        $newUrl->setAutogenerated($autogenerated);

        $entityManager->persist($newUrl);

        $entityManager->flush();

        if($autogenerated){
            $created = "Hemos generado tu URL automÃ¡ticamente con exito.";
        }else{
            $created = "Tu custom URL se ha creado con exito.";
        }

        return $this->forward('App\Controller\ShortenerController::index', [
            'created'  => $created,
            'endpoint' => "/$urlEndpoint",
            'autogenerated' => $autogenerated
        ]);
    }

    #[Route('/redirection', name: 'redirection')]
    public function redirection(String $finalRedirection, ManagerRegistry $doctrine, Request $request): Response
    {   
        $repository = $doctrine->getRepository(UrlAddress::class);

        $url = $repository->findOneBy(['urlEndpoint'=> $finalRedirection]);

        if(!$url){
            // return new Response('No encontramos esa URL en nuestras bases de datos');
            // return $this->forward('App\Controller\ShortenerController::index', [
            //     'error' => 'No encontramos esa URL en nuestras bases de datos'
            // ]);
            $this->addFlash('error', 'No encontramos esa URL en nuestras bases de datos');
            return $this->redirectToRoute('shortener');
        }
        
        $finalUrl = $url->getRealUrl();
       
        if(str_split($finalUrl)[0] === 'h'){
            return $this->redirect($finalUrl);
        }else{
            return $this->redirect('http://'.$finalUrl);
        }
    }
}
